cmake_minimum_required(VERSION 2.8)
project(test_package)
enable_testing()

set(Boost_DEBUG 1)
include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)

# if(CONAN_SETTINGS_OS STREQUAL "Android")
#     set(CONAN_LIBCXX "") # NDK fails when specified: https://github.com/android-ndk/ndk/issues/541
# endif()

conan_basic_setup()

if(NOT HEADER_ONLY)
    set(boost_components)
    if (WITH_COROUTINE)
        list(APPEND boost_components coroutine)
        list(APPEND boost_components thread)
    endif()
    if (WITH_PYTHON)
        list(APPEND boost_components python)
    endif()
    if (WITH_RANDOM)
        list(APPEND boost_components random)
    endif()
    if (WITH_REGEX)
        list(APPEND boost_components regex)
    endif()
    if (WITH_CHRONO)
        list(APPEND boost_components chrono)
    endif()
    if (WITH_COMPLEX)
        list(APPEND boost_components fiber)
        list(APPEND boost_components filesystem)
        list(APPEND boost_components log)
    endif()
    if (WITH_TEST)
        list(APPEND boost_components unit_test_framework)
    endif()

    find_package(Boost COMPONENTS ${boost_components} REQUIRED)

    include_directories(${Boost_INCLUDE_DIRS})

    message(STATUS "Conan libs=> ${CONAN_LIBS}")
    message(STATUS "Boost libs=> ${Boost_LIBRARIES}")

    if (WITH_RANDOM)
        add_executable(random_exe random.cpp)
        target_link_libraries(random_exe ${Boost_LIBRARIES})
    endif()
    if (WITH_REGEX)
        add_executable(regex_exe regex.cpp)
        target_link_libraries(regex_exe ${Boost_LIBRARIES})
    endif()

    if (WITH_TEST)
        add_executable(test_exe test.cpp)
        target_link_libraries(test_exe ${Boost_LIBRARIES})
    endif()

    if (WITH_COROUTINE)
        add_executable(coroutine_exe coroutine.cpp)
        target_link_libraries(coroutine_exe ${Boost_LIBRARIES})
    endif()

    if (WITH_CHRONO)
        add_executable(chrono_exe chrono.cpp)
        target_link_libraries(chrono_exe ${Boost_LIBRARIES})
    endif()

    if (WITH_COMPLEX)
        add_executable(complex_exe complex.cpp)
        target_link_libraries(complex_exe ${Boost_LIBRARIES})
        target_include_directories(complex_exe  PUBLIC ${CMAKE_CURRENT_LIST_DIR}/include/)
    endif()

    if(WITH_PYTHON)
        add_library(hello_ext SHARED python.cpp)
        if(WIN32)
            set_target_properties(hello_ext PROPERTIES SUFFIX ".pyd")
            target_include_directories(hello_ext PRIVATE C:/Python27/include)
            target_link_libraries(hello_ext C:/Python27/libs/python27.lib ${CONAN_LIBS})
        endif()
    endif()

    if (WITH_REGEX)
        add_test(NAME TestRegex COMMAND regex_exe)
    endif()
endif()

add_executable(lambda_exe lambda.cpp)

add_test(NAME TestLambda COMMAND lambda_exe)

if(NOT HEADER_ONLY AND WITH_REGEX)
    # Test a different exe linking with the CONAN_LIBS to actually test the package_info
    add_executable(newregex regex.cpp)
    target_link_libraries(newregex ${CONAN_LIBS})
    add_test(NAME TestRegexNew COMMAND newregex)
endif()
